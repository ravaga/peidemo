/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AirEmission'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AirEmission'));
  } else {
    // Browser globals (root is window)
    if (!root.Peidemo) {
      root.Peidemo = {};
    }
    root.Peidemo.AirEmissionResourceApi = factory(root.Peidemo.ApiClient, root.Peidemo.AirEmission);
  }
}(this, function(ApiClient, AirEmission) {
  'use strict';

  /**
   * AirEmissionResource service.
   * @module api/AirEmissionResourceApi
   * @version 0.0.1
   */

  /**
   * Constructs a new AirEmissionResourceApi. 
   * @alias module:api/AirEmissionResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAirEmission operation.
     * @callback module:api/AirEmissionResourceApi~createAirEmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AirEmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a AirEmission
     * If id is not provided, it will be randomly generated
     * @param {module:model/AirEmission} body AirEmission description
     * @param {module:api/AirEmissionResourceApi~createAirEmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AirEmission}
     */
    this.createAirEmission = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAirEmission");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AirEmission;

      return this.apiClient.callApi(
        '/airEmissions/create', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAirEmission operation.
     * @callback module:api/AirEmissionResourceApi~deleteAirEmissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a AirEmission
     * 
     * @param {String} id ID of AirEmission
     * @param {module:api/AirEmissionResourceApi~deleteAirEmissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAirEmission = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAirEmission");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/airEmissions/delete/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAirEmissionByID operation.
     * @callback module:api/AirEmissionResourceApi~getAirEmissionByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AirEmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a AirEmission by id
     * 
     * @param {String} id AirEmission
     * @param {module:api/AirEmissionResourceApi~getAirEmissionByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AirEmission}
     */
    this.getAirEmissionByID = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAirEmissionByID");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AirEmission;

      return this.apiClient.callApi(
        '/airEmissions/get/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAirEmissions operation.
     * @callback module:api/AirEmissionResourceApi~listAirEmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AirEmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all AirEmissions
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.category category
     * @param {module:api/AirEmissionResourceApi~listAirEmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AirEmission>}
     */
    this.listAirEmissions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'category': opts['category'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AirEmission];

      return this.apiClient.callApi(
        '/airEmissions/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAirEmission operation.
     * @callback module:api/AirEmissionResourceApi~updateAirEmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AirEmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a AirEmission
     * 
     * @param {module:model/AirEmission} body AirEmission description
     * @param {module:api/AirEmissionResourceApi~updateAirEmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AirEmission}
     */
    this.updateAirEmission = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAirEmission");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AirEmission;

      return this.apiClient.callApi(
        '/airEmissions/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
