/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Ship', function() {
      beforeEach(function() {
        instance = new Peidemo.Ship();
      });

      it('should create an instance of Ship', function() {
        // TODO: update the code to test Ship
        expect(instance).to.be.a(Peidemo.Ship);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property vesselName (base name: "vesselName")', function() {
        // TODO: update the code to test the property vesselName
        expect(instance).to.have.property('vesselName');
        // expect(instance.vesselName).to.be(expectedValueLiteral);
      });

      it('should have the property imo (base name: "imo")', function() {
        // TODO: update the code to test the property imo
        expect(instance).to.have.property('imo');
        // expect(instance.imo).to.be(expectedValueLiteral);
      });

      it('should have the property vesselType (base name: "vesselType")', function() {
        // TODO: update the code to test the property vesselType
        expect(instance).to.have.property('vesselType');
        // expect(instance.vesselType).to.be(expectedValueLiteral);
      });

      it('should have the property vesselCategory (base name: "vesselCategory")', function() {
        // TODO: update the code to test the property vesselCategory
        expect(instance).to.have.property('vesselCategory');
        // expect(instance.vesselCategory).to.be(expectedValueLiteral);
      });

      it('should have the property grossTonnage (base name: "grossTonnage")', function() {
        // TODO: update the code to test the property grossTonnage
        expect(instance).to.have.property('grossTonnage');
        // expect(instance.grossTonnage).to.be(expectedValueLiteral);
      });

      it('should have the property amountCargo (base name: "amountCargo")', function() {
        // TODO: update the code to test the property amountCargo
        expect(instance).to.have.property('amountCargo');
        // expect(instance.amountCargo).to.be(expectedValueLiteral);
      });

      it('should have the property waste (base name: "waste")', function() {
        // TODO: update the code to test the property waste
        expect(instance).to.have.property('waste');
        // expect(instance.waste).to.be(expectedValueLiteral);
      });

      it('should have the property atmosphereEmission (base name: "atmosphereEmission")', function() {
        // TODO: update the code to test the property atmosphereEmission
        expect(instance).to.have.property('atmosphereEmission');
        // expect(instance.atmosphereEmission).to.be(expectedValueLiteral);
      });

      it('should have the property wasteWaterEmission (base name: "wasteWaterEmission")', function() {
        // TODO: update the code to test the property wasteWaterEmission
        expect(instance).to.have.property('wasteWaterEmission');
        // expect(instance.wasteWaterEmission).to.be(expectedValueLiteral);
      });

    });
  });

}));
