/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('JsonNode', function() {
      beforeEach(function() {
        instance = new Peidemo.JsonNode();
      });

      it('should create an instance of JsonNode', function() {
        // TODO: update the code to test JsonNode
        expect(instance).to.be.a(Peidemo.JsonNode);
      });

      it('should have the property _array (base name: "array")', function() {
        // TODO: update the code to test the property _array
        expect(instance).to.have.property('_array');
        // expect(instance._array).to.be(expectedValueLiteral);
      });

      it('should have the property _null (base name: "null")', function() {
        // TODO: update the code to test the property _null
        expect(instance).to.have.property('_null');
        // expect(instance._null).to.be(expectedValueLiteral);
      });

      it('should have the property containerNode (base name: "containerNode")', function() {
        // TODO: update the code to test the property containerNode
        expect(instance).to.have.property('containerNode');
        // expect(instance.containerNode).to.be(expectedValueLiteral);
      });

      it('should have the property missingNode (base name: "missingNode")', function() {
        // TODO: update the code to test the property missingNode
        expect(instance).to.have.property('missingNode');
        // expect(instance.missingNode).to.be(expectedValueLiteral);
      });

      it('should have the property floatingPointNumber (base name: "floatingPointNumber")', function() {
        // TODO: update the code to test the property floatingPointNumber
        expect(instance).to.have.property('floatingPointNumber');
        // expect(instance.floatingPointNumber).to.be(expectedValueLiteral);
      });

      it('should have the property integralNumber (base name: "integralNumber")', function() {
        // TODO: update the code to test the property integralNumber
        expect(instance).to.have.property('integralNumber');
        // expect(instance.integralNumber).to.be(expectedValueLiteral);
      });

      it('should have the property valueNode (base name: "valueNode")', function() {
        // TODO: update the code to test the property valueNode
        expect(instance).to.have.property('valueNode');
        // expect(instance.valueNode).to.be(expectedValueLiteral);
      });

      it('should have the property _float (base name: "float")', function() {
        // TODO: update the code to test the property _float
        expect(instance).to.have.property('_float');
        // expect(instance._float).to.be(expectedValueLiteral);
      });

      it('should have the property nodeType (base name: "nodeType")', function() {
        // TODO: update the code to test the property nodeType
        expect(instance).to.have.property('nodeType');
        // expect(instance.nodeType).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property _int (base name: "int")', function() {
        // TODO: update the code to test the property _int
        expect(instance).to.have.property('_int');
        // expect(instance._int).to.be(expectedValueLiteral);
      });

      it('should have the property _object (base name: "object")', function() {
        // TODO: update the code to test the property _object
        expect(instance).to.have.property('_object');
        // expect(instance._object).to.be(expectedValueLiteral);
      });

      it('should have the property pojo (base name: "pojo")', function() {
        // TODO: update the code to test the property pojo
        expect(instance).to.have.property('pojo');
        // expect(instance.pojo).to.be(expectedValueLiteral);
      });

      it('should have the property _boolean (base name: "boolean")', function() {
        // TODO: update the code to test the property _boolean
        expect(instance).to.have.property('_boolean');
        // expect(instance._boolean).to.be(expectedValueLiteral);
      });

      it('should have the property _long (base name: "long")', function() {
        // TODO: update the code to test the property _long
        expect(instance).to.have.property('_long');
        // expect(instance._long).to.be(expectedValueLiteral);
      });

      it('should have the property binary (base name: "binary")', function() {
        // TODO: update the code to test the property binary
        expect(instance).to.have.property('binary');
        // expect(instance.binary).to.be(expectedValueLiteral);
      });

      it('should have the property textual (base name: "textual")', function() {
        // TODO: update the code to test the property textual
        expect(instance).to.have.property('textual');
        // expect(instance.textual).to.be(expectedValueLiteral);
      });

      it('should have the property bigDecimal (base name: "bigDecimal")', function() {
        // TODO: update the code to test the property bigDecimal
        expect(instance).to.have.property('bigDecimal');
        // expect(instance.bigDecimal).to.be(expectedValueLiteral);
      });

      it('should have the property _short (base name: "short")', function() {
        // TODO: update the code to test the property _short
        expect(instance).to.have.property('_short');
        // expect(instance._short).to.be(expectedValueLiteral);
      });

      it('should have the property _double (base name: "double")', function() {
        // TODO: update the code to test the property _double
        expect(instance).to.have.property('_double');
        // expect(instance._double).to.be(expectedValueLiteral);
      });

      it('should have the property bigInteger (base name: "bigInteger")', function() {
        // TODO: update the code to test the property bigInteger
        expect(instance).to.have.property('bigInteger');
        // expect(instance.bigInteger).to.be(expectedValueLiteral);
      });

    });
  });

}));
