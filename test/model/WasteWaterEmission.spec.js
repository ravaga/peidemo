/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('WasteWaterEmission', function() {
      beforeEach(function() {
        instance = new Peidemo.WasteWaterEmission();
      });

      it('should create an instance of WasteWaterEmission', function() {
        // TODO: update the code to test WasteWaterEmission
        expect(instance).to.be.a(Peidemo.WasteWaterEmission);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property oilyBilgeWater (base name: "oilyBilgeWater")', function() {
        // TODO: update the code to test the property oilyBilgeWater
        expect(instance).to.have.property('oilyBilgeWater');
        // expect(instance.oilyBilgeWater).to.be(expectedValueLiteral);
      });

      it('should have the property oilyResidues (base name: "oilyResidues")', function() {
        // TODO: update the code to test the property oilyResidues
        expect(instance).to.have.property('oilyResidues');
        // expect(instance.oilyResidues).to.be(expectedValueLiteral);
      });

      it('should have the property oilyTankWashings (base name: "oilyTankWashings")', function() {
        // TODO: update the code to test the property oilyTankWashings
        expect(instance).to.have.property('oilyTankWashings');
        // expect(instance.oilyTankWashings).to.be(expectedValueLiteral);
      });

      it('should have the property dirtyBallastWater (base name: "dirtyBallastWater")', function() {
        // TODO: update the code to test the property dirtyBallastWater
        expect(instance).to.have.property('dirtyBallastWater');
        // expect(instance.dirtyBallastWater).to.be(expectedValueLiteral);
      });

      it('should have the property scaleAndSludgeTankCleaning (base name: "scaleAndSludgeTankCleaning")', function() {
        // TODO: update the code to test the property scaleAndSludgeTankCleaning
        expect(instance).to.have.property('scaleAndSludgeTankCleaning');
        // expect(instance.scaleAndSludgeTankCleaning).to.be(expectedValueLiteral);
      });

      it('should have the property otherOil (base name: "otherOil")', function() {
        // TODO: update the code to test the property otherOil
        expect(instance).to.have.property('otherOil');
        // expect(instance.otherOil).to.be(expectedValueLiteral);
      });

      it('should have the property noxiusLiquidSubstancesX (base name: "noxiusLiquidSubstancesX")', function() {
        // TODO: update the code to test the property noxiusLiquidSubstancesX
        expect(instance).to.have.property('noxiusLiquidSubstancesX');
        // expect(instance.noxiusLiquidSubstancesX).to.be(expectedValueLiteral);
      });

      it('should have the property nlsY (base name: "nlsY")', function() {
        // TODO: update the code to test the property nlsY
        expect(instance).to.have.property('nlsY');
        // expect(instance.nlsY).to.be(expectedValueLiteral);
      });

      it('should have the property nlsZ (base name: "nlsZ")', function() {
        // TODO: update the code to test the property nlsZ
        expect(instance).to.have.property('nlsZ');
        // expect(instance.nlsZ).to.be(expectedValueLiteral);
      });

      it('should have the property nlsOther (base name: "nlsOther")', function() {
        // TODO: update the code to test the property nlsOther
        expect(instance).to.have.property('nlsOther');
        // expect(instance.nlsOther).to.be(expectedValueLiteral);
      });

      it('should have the property sewage (base name: "sewage")', function() {
        // TODO: update the code to test the property sewage
        expect(instance).to.have.property('sewage');
        // expect(instance.sewage).to.be(expectedValueLiteral);
      });

    });
  });

}));
