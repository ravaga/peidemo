/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Waste', function() {
      beforeEach(function() {
        instance = new Peidemo.Waste();
      });

      it('should create an instance of Waste', function() {
        // TODO: update the code to test Waste
        expect(instance).to.be.a(Peidemo.Waste);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property plastics (base name: "plastics")', function() {
        // TODO: update the code to test the property plastics
        expect(instance).to.have.property('plastics');
        // expect(instance.plastics).to.be(expectedValueLiteral);
      });

      it('should have the property foodWaste (base name: "foodWaste")', function() {
        // TODO: update the code to test the property foodWaste
        expect(instance).to.have.property('foodWaste');
        // expect(instance.foodWaste).to.be(expectedValueLiteral);
      });

      it('should have the property domesticWaste (base name: "domesticWaste")', function() {
        // TODO: update the code to test the property domesticWaste
        expect(instance).to.have.property('domesticWaste');
        // expect(instance.domesticWaste).to.be(expectedValueLiteral);
      });

      it('should have the property cookingOil (base name: "cookingOil")', function() {
        // TODO: update the code to test the property cookingOil
        expect(instance).to.have.property('cookingOil');
        // expect(instance.cookingOil).to.be(expectedValueLiteral);
      });

      it('should have the property incineratorAshes (base name: "incineratorAshes")', function() {
        // TODO: update the code to test the property incineratorAshes
        expect(instance).to.have.property('incineratorAshes');
        // expect(instance.incineratorAshes).to.be(expectedValueLiteral);
      });

      it('should have the property operationalWaste (base name: "operationalWaste")', function() {
        // TODO: update the code to test the property operationalWaste
        expect(instance).to.have.property('operationalWaste');
        // expect(instance.operationalWaste).to.be(expectedValueLiteral);
      });

      it('should have the property animalCarcass (base name: "animalCarcass")', function() {
        // TODO: update the code to test the property animalCarcass
        expect(instance).to.have.property('animalCarcass');
        // expect(instance.animalCarcass).to.be(expectedValueLiteral);
      });

      it('should have the property fishingGear (base name: "fishingGear")', function() {
        // TODO: update the code to test the property fishingGear
        expect(instance).to.have.property('fishingGear');
        // expect(instance.fishingGear).to.be(expectedValueLiteral);
      });

      it('should have the property ewaste (base name: "ewaste")', function() {
        // TODO: update the code to test the property ewaste
        expect(instance).to.have.property('ewaste');
        // expect(instance.ewaste).to.be(expectedValueLiteral);
      });

      it('should have the property cargoResiduesHarmful (base name: "cargoResiduesHarmful")', function() {
        // TODO: update the code to test the property cargoResiduesHarmful
        expect(instance).to.have.property('cargoResiduesHarmful');
        // expect(instance.cargoResiduesHarmful).to.be(expectedValueLiteral);
      });

      it('should have the property cargoResiduesNonHarmful (base name: "cargoResiduesNonHarmful")', function() {
        // TODO: update the code to test the property cargoResiduesNonHarmful
        expect(instance).to.have.property('cargoResiduesNonHarmful');
        // expect(instance.cargoResiduesNonHarmful).to.be(expectedValueLiteral);
      });

      it('should have the property passivelyFishedWasted (base name: "passivelyFishedWasted")', function() {
        // TODO: update the code to test the property passivelyFishedWasted
        expect(instance).to.have.property('passivelyFishedWasted');
        // expect(instance.passivelyFishedWasted).to.be(expectedValueLiteral);
      });

      it('should have the property otherSubstances (base name: "otherSubstances")', function() {
        // TODO: update the code to test the property otherSubstances
        expect(instance).to.have.property('otherSubstances');
        // expect(instance.otherSubstances).to.be(expectedValueLiteral);
      });

    });
  });

}));
