/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Peidemo.ShipResourceApi();
  });

  describe('(package)', function() {
    describe('ShipResourceApi', function() {
      describe('createShip', function() {
        it('should call createShip successfully', function(done) {
          // TODO: uncomment, update parameter values for createShip call and complete the assertions
          /*
          var body = new Peidemo.Ship();
          body.id = "";
          body.vesselName = "";
          body.imo = "";
          body.vesselType = "";
          body.vesselCategory = "";
          body.grossTonnage = 0;
          body.amountCargo = 0;
          body.atmosphereEmission = new Peidemo.AtmosphereEmission();
          body.atmosphereEmission.id = "";
          body.atmosphereEmission.description = "";
          body.atmosphereEmission.engineModel = "";
          body.atmosphereEmission.fuelType = "";
          body.atmosphereEmission.mainEnginePower = 0;
          body.atmosphereEmission.auxiliaryEnginePower = 0;
          body.atmosphereEmission.timeManouvring = 0.0;
          body.atmosphereEmission.timeAtBerth = 0.0;
          body.wasteWaterEmission = new Peidemo.WasteWaterEmission();
          body.wasteWaterEmission.id = "";
          body.wasteWaterEmission.description = "";
          body.wasteWaterEmission.oilyBilgeWater = 0.0;
          body.wasteWaterEmission.oilyResidues = 0.0;
          body.wasteWaterEmission.oilyTankWashings = 0.0;
          body.wasteWaterEmission.dirtyBallastWater = 0.0;
          body.wasteWaterEmission.scaleAndSludgeTankCleaning = 0.0;
          body.wasteWaterEmission.otherOil = 0.0;
          body.wasteWaterEmission.noxiusLiquidSubstancesX = 0.0;
          body.wasteWaterEmission.nlsY = 0.0;
          body.wasteWaterEmission.nlsZ = 0.0;
          body.wasteWaterEmission.nlsOther = 0.0;
          body.wasteWaterEmission.sewage = 0.0;
          body.waste = new Peidemo.Waste();
          body.waste.id = "";
          body.waste.description = "";
          body.waste.plastics = 0.0;
          body.waste.foodWaste = 0.0;
          body.waste.domesticWaste = 0.0;
          body.waste.cookingOil = 0.0;
          body.waste.incineratorAshes = 0.0;
          body.waste.operationalWaste = 0.0;
          body.waste.animalCarcass = 0.0;
          body.waste.fishingGear = 0.0;
          body.waste.ewaste = 0.0;
          body.waste.cargoResiduesHarmful = 0.0;
          body.waste.cargoResiduesNonHarmful = 0.0;
          body.waste.passivelyFishedWasted = 0.0;
          body.waste.otherSubstances = 0.0;

          instance.createShip(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Ship);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.vesselName).to.be.a('string');
            expect(data.vesselName).to.be("");
            expect(data.imo).to.be.a('string');
            expect(data.imo).to.be("");
            expect(data.vesselType).to.be.a('string');
            expect(data.vesselType).to.be("");
            expect(data.vesselCategory).to.be.a('string');
            expect(data.vesselCategory).to.be("");
            expect(data.grossTonnage).to.be.a('number');
            expect(data.grossTonnage).to.be(0);
            expect(data.amountCargo).to.be.a('number');
            expect(data.amountCargo).to.be(0);
            expect(data.atmosphereEmission).to.be.a(Peidemo.AtmosphereEmission);
                  expect(data.atmosphereEmission.id).to.be.a('string');
              expect(data.atmosphereEmission.id).to.be("");
              expect(data.atmosphereEmission.description).to.be.a('string');
              expect(data.atmosphereEmission.description).to.be("");
              expect(data.atmosphereEmission.engineModel).to.be.a('string');
              expect(data.atmosphereEmission.engineModel).to.be("");
              expect(data.atmosphereEmission.fuelType).to.be.a('string');
              expect(data.atmosphereEmission.fuelType).to.be("");
              expect(data.atmosphereEmission.mainEnginePower).to.be.a('number');
              expect(data.atmosphereEmission.mainEnginePower).to.be(0);
              expect(data.atmosphereEmission.auxiliaryEnginePower).to.be.a('number');
              expect(data.atmosphereEmission.auxiliaryEnginePower).to.be(0);
              expect(data.atmosphereEmission.timeManouvring).to.be.a('number');
              expect(data.atmosphereEmission.timeManouvring).to.be(0.0);
              expect(data.atmosphereEmission.timeAtBerth).to.be.a('number');
              expect(data.atmosphereEmission.timeAtBerth).to.be(0.0);
            expect(data.wasteWaterEmission).to.be.a(Peidemo.WasteWaterEmission);
                  expect(data.wasteWaterEmission.id).to.be.a('string');
              expect(data.wasteWaterEmission.id).to.be("");
              expect(data.wasteWaterEmission.description).to.be.a('string');
              expect(data.wasteWaterEmission.description).to.be("");
              expect(data.wasteWaterEmission.oilyBilgeWater).to.be.a('number');
              expect(data.wasteWaterEmission.oilyBilgeWater).to.be(0.0);
              expect(data.wasteWaterEmission.oilyResidues).to.be.a('number');
              expect(data.wasteWaterEmission.oilyResidues).to.be(0.0);
              expect(data.wasteWaterEmission.oilyTankWashings).to.be.a('number');
              expect(data.wasteWaterEmission.oilyTankWashings).to.be(0.0);
              expect(data.wasteWaterEmission.dirtyBallastWater).to.be.a('number');
              expect(data.wasteWaterEmission.dirtyBallastWater).to.be(0.0);
              expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be.a('number');
              expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be(0.0);
              expect(data.wasteWaterEmission.otherOil).to.be.a('number');
              expect(data.wasteWaterEmission.otherOil).to.be(0.0);
              expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be.a('number');
              expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be(0.0);
              expect(data.wasteWaterEmission.nlsY).to.be.a('number');
              expect(data.wasteWaterEmission.nlsY).to.be(0.0);
              expect(data.wasteWaterEmission.nlsZ).to.be.a('number');
              expect(data.wasteWaterEmission.nlsZ).to.be(0.0);
              expect(data.wasteWaterEmission.nlsOther).to.be.a('number');
              expect(data.wasteWaterEmission.nlsOther).to.be(0.0);
              expect(data.wasteWaterEmission.sewage).to.be.a('number');
              expect(data.wasteWaterEmission.sewage).to.be(0.0);
            expect(data.waste).to.be.a(Peidemo.Waste);
                  expect(data.waste.id).to.be.a('string');
              expect(data.waste.id).to.be("");
              expect(data.waste.description).to.be.a('string');
              expect(data.waste.description).to.be("");
              expect(data.waste.plastics).to.be.a('number');
              expect(data.waste.plastics).to.be(0.0);
              expect(data.waste.foodWaste).to.be.a('number');
              expect(data.waste.foodWaste).to.be(0.0);
              expect(data.waste.domesticWaste).to.be.a('number');
              expect(data.waste.domesticWaste).to.be(0.0);
              expect(data.waste.cookingOil).to.be.a('number');
              expect(data.waste.cookingOil).to.be(0.0);
              expect(data.waste.incineratorAshes).to.be.a('number');
              expect(data.waste.incineratorAshes).to.be(0.0);
              expect(data.waste.operationalWaste).to.be.a('number');
              expect(data.waste.operationalWaste).to.be(0.0);
              expect(data.waste.animalCarcass).to.be.a('number');
              expect(data.waste.animalCarcass).to.be(0.0);
              expect(data.waste.fishingGear).to.be.a('number');
              expect(data.waste.fishingGear).to.be(0.0);
              expect(data.waste.ewaste).to.be.a('number');
              expect(data.waste.ewaste).to.be(0.0);
              expect(data.waste.cargoResiduesHarmful).to.be.a('number');
              expect(data.waste.cargoResiduesHarmful).to.be(0.0);
              expect(data.waste.cargoResiduesNonHarmful).to.be.a('number');
              expect(data.waste.cargoResiduesNonHarmful).to.be(0.0);
              expect(data.waste.passivelyFishedWasted).to.be.a('number');
              expect(data.waste.passivelyFishedWasted).to.be(0.0);
              expect(data.waste.otherSubstances).to.be.a('number');
              expect(data.waste.otherSubstances).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteShip', function() {
        it('should call deleteShip successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteShip call
          /*
          var id = "id_example";

          instance.deleteShip(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getShipByID', function() {
        it('should call getShipByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getShipByID call and complete the assertions
          /*
          var id = "id_example";

          instance.getShipByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Ship);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.vesselName).to.be.a('string');
            expect(data.vesselName).to.be("");
            expect(data.imo).to.be.a('string');
            expect(data.imo).to.be("");
            expect(data.vesselType).to.be.a('string');
            expect(data.vesselType).to.be("");
            expect(data.vesselCategory).to.be.a('string');
            expect(data.vesselCategory).to.be("");
            expect(data.grossTonnage).to.be.a('number');
            expect(data.grossTonnage).to.be(0);
            expect(data.amountCargo).to.be.a('number');
            expect(data.amountCargo).to.be(0);
            expect(data.atmosphereEmission).to.be.a(Peidemo.AtmosphereEmission);
                  expect(data.atmosphereEmission.id).to.be.a('string');
              expect(data.atmosphereEmission.id).to.be("");
              expect(data.atmosphereEmission.description).to.be.a('string');
              expect(data.atmosphereEmission.description).to.be("");
              expect(data.atmosphereEmission.engineModel).to.be.a('string');
              expect(data.atmosphereEmission.engineModel).to.be("");
              expect(data.atmosphereEmission.fuelType).to.be.a('string');
              expect(data.atmosphereEmission.fuelType).to.be("");
              expect(data.atmosphereEmission.mainEnginePower).to.be.a('number');
              expect(data.atmosphereEmission.mainEnginePower).to.be(0);
              expect(data.atmosphereEmission.auxiliaryEnginePower).to.be.a('number');
              expect(data.atmosphereEmission.auxiliaryEnginePower).to.be(0);
              expect(data.atmosphereEmission.timeManouvring).to.be.a('number');
              expect(data.atmosphereEmission.timeManouvring).to.be(0.0);
              expect(data.atmosphereEmission.timeAtBerth).to.be.a('number');
              expect(data.atmosphereEmission.timeAtBerth).to.be(0.0);
            expect(data.wasteWaterEmission).to.be.a(Peidemo.WasteWaterEmission);
                  expect(data.wasteWaterEmission.id).to.be.a('string');
              expect(data.wasteWaterEmission.id).to.be("");
              expect(data.wasteWaterEmission.description).to.be.a('string');
              expect(data.wasteWaterEmission.description).to.be("");
              expect(data.wasteWaterEmission.oilyBilgeWater).to.be.a('number');
              expect(data.wasteWaterEmission.oilyBilgeWater).to.be(0.0);
              expect(data.wasteWaterEmission.oilyResidues).to.be.a('number');
              expect(data.wasteWaterEmission.oilyResidues).to.be(0.0);
              expect(data.wasteWaterEmission.oilyTankWashings).to.be.a('number');
              expect(data.wasteWaterEmission.oilyTankWashings).to.be(0.0);
              expect(data.wasteWaterEmission.dirtyBallastWater).to.be.a('number');
              expect(data.wasteWaterEmission.dirtyBallastWater).to.be(0.0);
              expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be.a('number');
              expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be(0.0);
              expect(data.wasteWaterEmission.otherOil).to.be.a('number');
              expect(data.wasteWaterEmission.otherOil).to.be(0.0);
              expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be.a('number');
              expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be(0.0);
              expect(data.wasteWaterEmission.nlsY).to.be.a('number');
              expect(data.wasteWaterEmission.nlsY).to.be(0.0);
              expect(data.wasteWaterEmission.nlsZ).to.be.a('number');
              expect(data.wasteWaterEmission.nlsZ).to.be(0.0);
              expect(data.wasteWaterEmission.nlsOther).to.be.a('number');
              expect(data.wasteWaterEmission.nlsOther).to.be(0.0);
              expect(data.wasteWaterEmission.sewage).to.be.a('number');
              expect(data.wasteWaterEmission.sewage).to.be(0.0);
            expect(data.waste).to.be.a(Peidemo.Waste);
                  expect(data.waste.id).to.be.a('string');
              expect(data.waste.id).to.be("");
              expect(data.waste.description).to.be.a('string');
              expect(data.waste.description).to.be("");
              expect(data.waste.plastics).to.be.a('number');
              expect(data.waste.plastics).to.be(0.0);
              expect(data.waste.foodWaste).to.be.a('number');
              expect(data.waste.foodWaste).to.be(0.0);
              expect(data.waste.domesticWaste).to.be.a('number');
              expect(data.waste.domesticWaste).to.be(0.0);
              expect(data.waste.cookingOil).to.be.a('number');
              expect(data.waste.cookingOil).to.be(0.0);
              expect(data.waste.incineratorAshes).to.be.a('number');
              expect(data.waste.incineratorAshes).to.be(0.0);
              expect(data.waste.operationalWaste).to.be.a('number');
              expect(data.waste.operationalWaste).to.be(0.0);
              expect(data.waste.animalCarcass).to.be.a('number');
              expect(data.waste.animalCarcass).to.be(0.0);
              expect(data.waste.fishingGear).to.be.a('number');
              expect(data.waste.fishingGear).to.be(0.0);
              expect(data.waste.ewaste).to.be.a('number');
              expect(data.waste.ewaste).to.be(0.0);
              expect(data.waste.cargoResiduesHarmful).to.be.a('number');
              expect(data.waste.cargoResiduesHarmful).to.be(0.0);
              expect(data.waste.cargoResiduesNonHarmful).to.be.a('number');
              expect(data.waste.cargoResiduesNonHarmful).to.be(0.0);
              expect(data.waste.passivelyFishedWasted).to.be.a('number');
              expect(data.waste.passivelyFishedWasted).to.be(0.0);
              expect(data.waste.otherSubstances).to.be.a('number');
              expect(data.waste.otherSubstances).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listShips', function() {
        it('should call listShips successfully', function(done) {
          // TODO: uncomment, update parameter values for listShips call and complete the assertions
          /*
          var opts = {};
          opts.category = "category_example";

          instance.listShips(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Peidemo.Ship);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.vesselName).to.be.a('string');
              expect(data.vesselName).to.be("");
              expect(data.imo).to.be.a('string');
              expect(data.imo).to.be("");
              expect(data.vesselType).to.be.a('string');
              expect(data.vesselType).to.be("");
              expect(data.vesselCategory).to.be.a('string');
              expect(data.vesselCategory).to.be("");
              expect(data.grossTonnage).to.be.a('number');
              expect(data.grossTonnage).to.be(0);
              expect(data.amountCargo).to.be.a('number');
              expect(data.amountCargo).to.be(0);
              expect(data.atmosphereEmission).to.be.a(Peidemo.AtmosphereEmission);
                    expect(data.atmosphereEmission.id).to.be.a('string');
                expect(data.atmosphereEmission.id).to.be("");
                expect(data.atmosphereEmission.description).to.be.a('string');
                expect(data.atmosphereEmission.description).to.be("");
                expect(data.atmosphereEmission.engineModel).to.be.a('string');
                expect(data.atmosphereEmission.engineModel).to.be("");
                expect(data.atmosphereEmission.fuelType).to.be.a('string');
                expect(data.atmosphereEmission.fuelType).to.be("");
                expect(data.atmosphereEmission.mainEnginePower).to.be.a('number');
                expect(data.atmosphereEmission.mainEnginePower).to.be(0);
                expect(data.atmosphereEmission.auxiliaryEnginePower).to.be.a('number');
                expect(data.atmosphereEmission.auxiliaryEnginePower).to.be(0);
                expect(data.atmosphereEmission.timeManouvring).to.be.a('number');
                expect(data.atmosphereEmission.timeManouvring).to.be(0.0);
                expect(data.atmosphereEmission.timeAtBerth).to.be.a('number');
                expect(data.atmosphereEmission.timeAtBerth).to.be(0.0);
              expect(data.wasteWaterEmission).to.be.a(Peidemo.WasteWaterEmission);
                    expect(data.wasteWaterEmission.id).to.be.a('string');
                expect(data.wasteWaterEmission.id).to.be("");
                expect(data.wasteWaterEmission.description).to.be.a('string');
                expect(data.wasteWaterEmission.description).to.be("");
                expect(data.wasteWaterEmission.oilyBilgeWater).to.be.a('number');
                expect(data.wasteWaterEmission.oilyBilgeWater).to.be(0.0);
                expect(data.wasteWaterEmission.oilyResidues).to.be.a('number');
                expect(data.wasteWaterEmission.oilyResidues).to.be(0.0);
                expect(data.wasteWaterEmission.oilyTankWashings).to.be.a('number');
                expect(data.wasteWaterEmission.oilyTankWashings).to.be(0.0);
                expect(data.wasteWaterEmission.dirtyBallastWater).to.be.a('number');
                expect(data.wasteWaterEmission.dirtyBallastWater).to.be(0.0);
                expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be.a('number');
                expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be(0.0);
                expect(data.wasteWaterEmission.otherOil).to.be.a('number');
                expect(data.wasteWaterEmission.otherOil).to.be(0.0);
                expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be.a('number');
                expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be(0.0);
                expect(data.wasteWaterEmission.nlsY).to.be.a('number');
                expect(data.wasteWaterEmission.nlsY).to.be(0.0);
                expect(data.wasteWaterEmission.nlsZ).to.be.a('number');
                expect(data.wasteWaterEmission.nlsZ).to.be(0.0);
                expect(data.wasteWaterEmission.nlsOther).to.be.a('number');
                expect(data.wasteWaterEmission.nlsOther).to.be(0.0);
                expect(data.wasteWaterEmission.sewage).to.be.a('number');
                expect(data.wasteWaterEmission.sewage).to.be(0.0);
              expect(data.waste).to.be.a(Peidemo.Waste);
                    expect(data.waste.id).to.be.a('string');
                expect(data.waste.id).to.be("");
                expect(data.waste.description).to.be.a('string');
                expect(data.waste.description).to.be("");
                expect(data.waste.plastics).to.be.a('number');
                expect(data.waste.plastics).to.be(0.0);
                expect(data.waste.foodWaste).to.be.a('number');
                expect(data.waste.foodWaste).to.be(0.0);
                expect(data.waste.domesticWaste).to.be.a('number');
                expect(data.waste.domesticWaste).to.be(0.0);
                expect(data.waste.cookingOil).to.be.a('number');
                expect(data.waste.cookingOil).to.be(0.0);
                expect(data.waste.incineratorAshes).to.be.a('number');
                expect(data.waste.incineratorAshes).to.be(0.0);
                expect(data.waste.operationalWaste).to.be.a('number');
                expect(data.waste.operationalWaste).to.be(0.0);
                expect(data.waste.animalCarcass).to.be.a('number');
                expect(data.waste.animalCarcass).to.be(0.0);
                expect(data.waste.fishingGear).to.be.a('number');
                expect(data.waste.fishingGear).to.be(0.0);
                expect(data.waste.ewaste).to.be.a('number');
                expect(data.waste.ewaste).to.be(0.0);
                expect(data.waste.cargoResiduesHarmful).to.be.a('number');
                expect(data.waste.cargoResiduesHarmful).to.be(0.0);
                expect(data.waste.cargoResiduesNonHarmful).to.be.a('number');
                expect(data.waste.cargoResiduesNonHarmful).to.be(0.0);
                expect(data.waste.passivelyFishedWasted).to.be.a('number');
                expect(data.waste.passivelyFishedWasted).to.be(0.0);
                expect(data.waste.otherSubstances).to.be.a('number');
                expect(data.waste.otherSubstances).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateShip', function() {
        it('should call updateShip successfully', function(done) {
          // TODO: uncomment, update parameter values for updateShip call and complete the assertions
          /*
          var body = new Peidemo.Ship();
          body.id = "";
          body.vesselName = "";
          body.imo = "";
          body.vesselType = "";
          body.vesselCategory = "";
          body.grossTonnage = 0;
          body.amountCargo = 0;
          body.atmosphereEmission = new Peidemo.AtmosphereEmission();
          body.atmosphereEmission.id = "";
          body.atmosphereEmission.description = "";
          body.atmosphereEmission.engineModel = "";
          body.atmosphereEmission.fuelType = "";
          body.atmosphereEmission.mainEnginePower = 0;
          body.atmosphereEmission.auxiliaryEnginePower = 0;
          body.atmosphereEmission.timeManouvring = 0.0;
          body.atmosphereEmission.timeAtBerth = 0.0;
          body.wasteWaterEmission = new Peidemo.WasteWaterEmission();
          body.wasteWaterEmission.id = "";
          body.wasteWaterEmission.description = "";
          body.wasteWaterEmission.oilyBilgeWater = 0.0;
          body.wasteWaterEmission.oilyResidues = 0.0;
          body.wasteWaterEmission.oilyTankWashings = 0.0;
          body.wasteWaterEmission.dirtyBallastWater = 0.0;
          body.wasteWaterEmission.scaleAndSludgeTankCleaning = 0.0;
          body.wasteWaterEmission.otherOil = 0.0;
          body.wasteWaterEmission.noxiusLiquidSubstancesX = 0.0;
          body.wasteWaterEmission.nlsY = 0.0;
          body.wasteWaterEmission.nlsZ = 0.0;
          body.wasteWaterEmission.nlsOther = 0.0;
          body.wasteWaterEmission.sewage = 0.0;
          body.waste = new Peidemo.Waste();
          body.waste.id = "";
          body.waste.description = "";
          body.waste.plastics = 0.0;
          body.waste.foodWaste = 0.0;
          body.waste.domesticWaste = 0.0;
          body.waste.cookingOil = 0.0;
          body.waste.incineratorAshes = 0.0;
          body.waste.operationalWaste = 0.0;
          body.waste.animalCarcass = 0.0;
          body.waste.fishingGear = 0.0;
          body.waste.ewaste = 0.0;
          body.waste.cargoResiduesHarmful = 0.0;
          body.waste.cargoResiduesNonHarmful = 0.0;
          body.waste.passivelyFishedWasted = 0.0;
          body.waste.otherSubstances = 0.0;

          instance.updateShip(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Ship);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.vesselName).to.be.a('string');
            expect(data.vesselName).to.be("");
            expect(data.imo).to.be.a('string');
            expect(data.imo).to.be("");
            expect(data.vesselType).to.be.a('string');
            expect(data.vesselType).to.be("");
            expect(data.vesselCategory).to.be.a('string');
            expect(data.vesselCategory).to.be("");
            expect(data.grossTonnage).to.be.a('number');
            expect(data.grossTonnage).to.be(0);
            expect(data.amountCargo).to.be.a('number');
            expect(data.amountCargo).to.be(0);
            expect(data.atmosphereEmission).to.be.a(Peidemo.AtmosphereEmission);
                  expect(data.atmosphereEmission.id).to.be.a('string');
              expect(data.atmosphereEmission.id).to.be("");
              expect(data.atmosphereEmission.description).to.be.a('string');
              expect(data.atmosphereEmission.description).to.be("");
              expect(data.atmosphereEmission.engineModel).to.be.a('string');
              expect(data.atmosphereEmission.engineModel).to.be("");
              expect(data.atmosphereEmission.fuelType).to.be.a('string');
              expect(data.atmosphereEmission.fuelType).to.be("");
              expect(data.atmosphereEmission.mainEnginePower).to.be.a('number');
              expect(data.atmosphereEmission.mainEnginePower).to.be(0);
              expect(data.atmosphereEmission.auxiliaryEnginePower).to.be.a('number');
              expect(data.atmosphereEmission.auxiliaryEnginePower).to.be(0);
              expect(data.atmosphereEmission.timeManouvring).to.be.a('number');
              expect(data.atmosphereEmission.timeManouvring).to.be(0.0);
              expect(data.atmosphereEmission.timeAtBerth).to.be.a('number');
              expect(data.atmosphereEmission.timeAtBerth).to.be(0.0);
            expect(data.wasteWaterEmission).to.be.a(Peidemo.WasteWaterEmission);
                  expect(data.wasteWaterEmission.id).to.be.a('string');
              expect(data.wasteWaterEmission.id).to.be("");
              expect(data.wasteWaterEmission.description).to.be.a('string');
              expect(data.wasteWaterEmission.description).to.be("");
              expect(data.wasteWaterEmission.oilyBilgeWater).to.be.a('number');
              expect(data.wasteWaterEmission.oilyBilgeWater).to.be(0.0);
              expect(data.wasteWaterEmission.oilyResidues).to.be.a('number');
              expect(data.wasteWaterEmission.oilyResidues).to.be(0.0);
              expect(data.wasteWaterEmission.oilyTankWashings).to.be.a('number');
              expect(data.wasteWaterEmission.oilyTankWashings).to.be(0.0);
              expect(data.wasteWaterEmission.dirtyBallastWater).to.be.a('number');
              expect(data.wasteWaterEmission.dirtyBallastWater).to.be(0.0);
              expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be.a('number');
              expect(data.wasteWaterEmission.scaleAndSludgeTankCleaning).to.be(0.0);
              expect(data.wasteWaterEmission.otherOil).to.be.a('number');
              expect(data.wasteWaterEmission.otherOil).to.be(0.0);
              expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be.a('number');
              expect(data.wasteWaterEmission.noxiusLiquidSubstancesX).to.be(0.0);
              expect(data.wasteWaterEmission.nlsY).to.be.a('number');
              expect(data.wasteWaterEmission.nlsY).to.be(0.0);
              expect(data.wasteWaterEmission.nlsZ).to.be.a('number');
              expect(data.wasteWaterEmission.nlsZ).to.be(0.0);
              expect(data.wasteWaterEmission.nlsOther).to.be.a('number');
              expect(data.wasteWaterEmission.nlsOther).to.be(0.0);
              expect(data.wasteWaterEmission.sewage).to.be.a('number');
              expect(data.wasteWaterEmission.sewage).to.be(0.0);
            expect(data.waste).to.be.a(Peidemo.Waste);
                  expect(data.waste.id).to.be.a('string');
              expect(data.waste.id).to.be("");
              expect(data.waste.description).to.be.a('string');
              expect(data.waste.description).to.be("");
              expect(data.waste.plastics).to.be.a('number');
              expect(data.waste.plastics).to.be(0.0);
              expect(data.waste.foodWaste).to.be.a('number');
              expect(data.waste.foodWaste).to.be(0.0);
              expect(data.waste.domesticWaste).to.be.a('number');
              expect(data.waste.domesticWaste).to.be(0.0);
              expect(data.waste.cookingOil).to.be.a('number');
              expect(data.waste.cookingOil).to.be(0.0);
              expect(data.waste.incineratorAshes).to.be.a('number');
              expect(data.waste.incineratorAshes).to.be(0.0);
              expect(data.waste.operationalWaste).to.be.a('number');
              expect(data.waste.operationalWaste).to.be(0.0);
              expect(data.waste.animalCarcass).to.be.a('number');
              expect(data.waste.animalCarcass).to.be(0.0);
              expect(data.waste.fishingGear).to.be.a('number');
              expect(data.waste.fishingGear).to.be(0.0);
              expect(data.waste.ewaste).to.be.a('number');
              expect(data.waste.ewaste).to.be(0.0);
              expect(data.waste.cargoResiduesHarmful).to.be.a('number');
              expect(data.waste.cargoResiduesHarmful).to.be(0.0);
              expect(data.waste.cargoResiduesNonHarmful).to.be.a('number');
              expect(data.waste.cargoResiduesNonHarmful).to.be(0.0);
              expect(data.waste.passivelyFishedWasted).to.be.a('number');
              expect(data.waste.passivelyFishedWasted).to.be(0.0);
              expect(data.waste.otherSubstances).to.be.a('number');
              expect(data.waste.otherSubstances).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
