/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Peidemo.SimulationResourceApi();
  });

  describe('(package)', function() {
    describe('SimulationResourceApi', function() {
      describe('createSimulation', function() {
        it('should call createSimulation successfully', function(done) {
          // TODO: uncomment, update parameter values for createSimulation call and complete the assertions
          /*
          var body = new Peidemo.Simulation();
          body.id = "";
          body.name = "";
          body.description = "";
          body.status = "";
          body.input = new Peidemo.SimulationInput();
          body.input.items = [new Peidemo.SimulationInputItem()];
          body.input.items[0].dateStart = "0";
          body.input.items[0].dateEnd = "0";
          body.input.items[0].description = "";
          body.input.items[0].ships = [""];
          body.output = new Peidemo.SimulationOutput();
          body.output.items = [new Peidemo.SimulationOutputItem()];
          body.output.items[0].dateStart = "0";
          body.output.items[0].dateEnd = "0";
          body.output.items[0].description = "";
          body.output.items[0].ekpis = [new Peidemo.EkpiSimItem()];
          body.output.items[0].ekpis[0].name = "";
          body.output.items[0].ekpis[0].description = "";
          body.output.items[0].ekpis[0].category = "";
          body.output.items[0].ekpis[0].weight = 0.0;
          body.output.items[0].ekpis[0].min = 0.0;
          body.output.items[0].ekpis[0].max = 0.0;
          body.output.items[0].ekpis[0].parentSubindex = "";
          body.output.items[0].ekpis[0].value = 0.0;
          body.output.items[0].ekpis[0].valueNorm = 0.0;
          body.output.items[0].ekpis[0].unit = "";
          body.output.items[0].subindices = [new Peidemo.SubindexSimItem()];
          body.output.items[0].subindices[0].name = "";
          body.output.items[0].subindices[0].description = "";
          body.output.items[0].subindices[0].weight = 0.0;
          body.output.items[0].subindices[0].children = [""];
          body.output.items[0].subindices[0].value = 0.0;
          body.output.items[0].sei = 0.0;
          body.output.averageOutput = new Peidemo.SimulationOutputItem();
          body.output.averageOutput.dateStart = "0";
          body.output.averageOutput.dateEnd = "0";
          body.output.averageOutput.description = "";
          body.output.averageOutput.ekpis = [new Peidemo.EkpiSimItem()];
          body.output.averageOutput.ekpis[0].name = "";
          body.output.averageOutput.ekpis[0].description = "";
          body.output.averageOutput.ekpis[0].category = "";
          body.output.averageOutput.ekpis[0].weight = 0.0;
          body.output.averageOutput.ekpis[0].min = 0.0;
          body.output.averageOutput.ekpis[0].max = 0.0;
          body.output.averageOutput.ekpis[0].parentSubindex = "";
          body.output.averageOutput.ekpis[0].value = 0.0;
          body.output.averageOutput.ekpis[0].valueNorm = 0.0;
          body.output.averageOutput.ekpis[0].unit = "";
          body.output.averageOutput.subindices = [new Peidemo.SubindexSimItem()];
          body.output.averageOutput.subindices[0].name = "";
          body.output.averageOutput.subindices[0].description = "";
          body.output.averageOutput.subindices[0].weight = 0.0;
          body.output.averageOutput.subindices[0].children = [""];
          body.output.averageOutput.subindices[0].value = 0.0;
          body.output.averageOutput.sei = 0.0;

          instance.createSimulation(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Simulation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.input).to.be.a(Peidemo.SimulationInput);
                  {
                let dataCtr = data.input.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Peidemo.SimulationInputItem);
                  expect(data.dateStart).to.be.a('number');
                  expect(data.dateStart).to.be("0");
                  expect(data.dateEnd).to.be.a('number');
                  expect(data.dateEnd).to.be("0");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  {
                    let dataCtr = data.ships;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                }
              }
            expect(data.output).to.be.a(Peidemo.SimulationOutput);
                  {
                let dataCtr = data.output.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Peidemo.SimulationOutputItem);
                  expect(data.dateStart).to.be.a('number');
                  expect(data.dateStart).to.be("0");
                  expect(data.dateEnd).to.be.a('number');
                  expect(data.dateEnd).to.be("0");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  {
                    let dataCtr = data.ekpis;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.EkpiSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.category).to.be.a('string');
                      expect(data.category).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      expect(data.min).to.be.a('number');
                      expect(data.min).to.be(0.0);
                      expect(data.max).to.be.a('number');
                      expect(data.max).to.be(0.0);
                      expect(data.parentSubindex).to.be.a('string');
                      expect(data.parentSubindex).to.be("");
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                      expect(data.valueNorm).to.be.a('number');
                      expect(data.valueNorm).to.be(0.0);
                      expect(data.unit).to.be.a('string');
                      expect(data.unit).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.subindices;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.SubindexSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      {
                        let dataCtr = data.children;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                    }
                  }
                  expect(data.sei).to.be.a('number');
                  expect(data.sei).to.be(0.0);
                }
              }
              expect(data.output.averageOutput).to.be.a(Peidemo.SimulationOutputItem);
                    expect(data.output.averageOutput.dateStart).to.be.a('number');
                expect(data.output.averageOutput.dateStart).to.be("0");
                expect(data.output.averageOutput.dateEnd).to.be.a('number');
                expect(data.output.averageOutput.dateEnd).to.be("0");
                expect(data.output.averageOutput.description).to.be.a('string');
                expect(data.output.averageOutput.description).to.be("");
                {
                  let dataCtr = data.output.averageOutput.ekpis;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.EkpiSimItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.category).to.be.a('string');
                    expect(data.category).to.be("");
                    expect(data.weight).to.be.a('number');
                    expect(data.weight).to.be(0.0);
                    expect(data.min).to.be.a('number');
                    expect(data.min).to.be(0.0);
                    expect(data.max).to.be.a('number');
                    expect(data.max).to.be(0.0);
                    expect(data.parentSubindex).to.be.a('string');
                    expect(data.parentSubindex).to.be("");
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be(0.0);
                    expect(data.valueNorm).to.be.a('number');
                    expect(data.valueNorm).to.be(0.0);
                    expect(data.unit).to.be.a('string');
                    expect(data.unit).to.be("");
                  }
                }
                {
                  let dataCtr = data.output.averageOutput.subindices;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.SubindexSimItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.weight).to.be.a('number');
                    expect(data.weight).to.be(0.0);
                    {
                      let dataCtr = data.children;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be(0.0);
                  }
                }
                expect(data.output.averageOutput.sei).to.be.a('number');
                expect(data.output.averageOutput.sei).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteSimulation', function() {
        it('should call deleteSimulation successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteSimulation call
          /*
          var id = "id_example";

          instance.deleteSimulation(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('executeModel', function() {
        it('should call executeModel successfully', function(done) {
          // TODO: uncomment, update parameter values for executeModel call
          /*
          var id = "id_example";
          var body = new Peidemo.JsonNode();
          body._array = false;
          body._null = false;
          body.containerNode = false;
          body.missingNode = false;
          body.floatingPointNumber = false;
          body.integralNumber = false;
          body.valueNode = false;
          body._float = false;
          body.nodeType = "ARRAY";
          body._number = false;
          body._int = false;
          body._object = false;
          body.pojo = false;
          body._boolean = false;
          body._long = false;
          body.binary = false;
          body.textual = false;
          body.bigDecimal = false;
          body._short = false;
          body._double = false;
          body.bigInteger = false;

          instance.executeModel(id, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSimulationByID', function() {
        it('should call getSimulationByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getSimulationByID call and complete the assertions
          /*
          var id = "id_example";

          instance.getSimulationByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Simulation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.input).to.be.a(Peidemo.SimulationInput);
                  {
                let dataCtr = data.input.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Peidemo.SimulationInputItem);
                  expect(data.dateStart).to.be.a('number');
                  expect(data.dateStart).to.be("0");
                  expect(data.dateEnd).to.be.a('number');
                  expect(data.dateEnd).to.be("0");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  {
                    let dataCtr = data.ships;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                }
              }
            expect(data.output).to.be.a(Peidemo.SimulationOutput);
                  {
                let dataCtr = data.output.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Peidemo.SimulationOutputItem);
                  expect(data.dateStart).to.be.a('number');
                  expect(data.dateStart).to.be("0");
                  expect(data.dateEnd).to.be.a('number');
                  expect(data.dateEnd).to.be("0");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  {
                    let dataCtr = data.ekpis;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.EkpiSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.category).to.be.a('string');
                      expect(data.category).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      expect(data.min).to.be.a('number');
                      expect(data.min).to.be(0.0);
                      expect(data.max).to.be.a('number');
                      expect(data.max).to.be(0.0);
                      expect(data.parentSubindex).to.be.a('string');
                      expect(data.parentSubindex).to.be("");
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                      expect(data.valueNorm).to.be.a('number');
                      expect(data.valueNorm).to.be(0.0);
                      expect(data.unit).to.be.a('string');
                      expect(data.unit).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.subindices;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.SubindexSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      {
                        let dataCtr = data.children;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                    }
                  }
                  expect(data.sei).to.be.a('number');
                  expect(data.sei).to.be(0.0);
                }
              }
              expect(data.output.averageOutput).to.be.a(Peidemo.SimulationOutputItem);
                    expect(data.output.averageOutput.dateStart).to.be.a('number');
                expect(data.output.averageOutput.dateStart).to.be("0");
                expect(data.output.averageOutput.dateEnd).to.be.a('number');
                expect(data.output.averageOutput.dateEnd).to.be("0");
                expect(data.output.averageOutput.description).to.be.a('string');
                expect(data.output.averageOutput.description).to.be("");
                {
                  let dataCtr = data.output.averageOutput.ekpis;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.EkpiSimItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.category).to.be.a('string');
                    expect(data.category).to.be("");
                    expect(data.weight).to.be.a('number');
                    expect(data.weight).to.be(0.0);
                    expect(data.min).to.be.a('number');
                    expect(data.min).to.be(0.0);
                    expect(data.max).to.be.a('number');
                    expect(data.max).to.be(0.0);
                    expect(data.parentSubindex).to.be.a('string');
                    expect(data.parentSubindex).to.be("");
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be(0.0);
                    expect(data.valueNorm).to.be.a('number');
                    expect(data.valueNorm).to.be(0.0);
                    expect(data.unit).to.be.a('string');
                    expect(data.unit).to.be("");
                  }
                }
                {
                  let dataCtr = data.output.averageOutput.subindices;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.SubindexSimItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.weight).to.be.a('number');
                    expect(data.weight).to.be(0.0);
                    {
                      let dataCtr = data.children;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be(0.0);
                  }
                }
                expect(data.output.averageOutput.sei).to.be.a('number');
                expect(data.output.averageOutput.sei).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listSimulations', function() {
        it('should call listSimulations successfully', function(done) {
          // TODO: uncomment listSimulations call and complete the assertions
          /*

          instance.listSimulations(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Peidemo.Simulation);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("");
              expect(data.input).to.be.a(Peidemo.SimulationInput);
                    {
                  let dataCtr = data.input.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.SimulationInputItem);
                    expect(data.dateStart).to.be.a('number');
                    expect(data.dateStart).to.be("0");
                    expect(data.dateEnd).to.be.a('number');
                    expect(data.dateEnd).to.be("0");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.ships;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                  }
                }
              expect(data.output).to.be.a(Peidemo.SimulationOutput);
                    {
                  let dataCtr = data.output.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.SimulationOutputItem);
                    expect(data.dateStart).to.be.a('number');
                    expect(data.dateStart).to.be("0");
                    expect(data.dateEnd).to.be.a('number');
                    expect(data.dateEnd).to.be("0");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.ekpis;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Peidemo.EkpiSimItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.category).to.be.a('string');
                        expect(data.category).to.be("");
                        expect(data.weight).to.be.a('number');
                        expect(data.weight).to.be(0.0);
                        expect(data.min).to.be.a('number');
                        expect(data.min).to.be(0.0);
                        expect(data.max).to.be.a('number');
                        expect(data.max).to.be(0.0);
                        expect(data.parentSubindex).to.be.a('string');
                        expect(data.parentSubindex).to.be("");
                        expect(data.value).to.be.a('number');
                        expect(data.value).to.be(0.0);
                        expect(data.valueNorm).to.be.a('number');
                        expect(data.valueNorm).to.be(0.0);
                        expect(data.unit).to.be.a('string');
                        expect(data.unit).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.subindices;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Peidemo.SubindexSimItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.weight).to.be.a('number');
                        expect(data.weight).to.be(0.0);
                        {
                          let dataCtr = data.children;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.value).to.be.a('number');
                        expect(data.value).to.be(0.0);
                      }
                    }
                    expect(data.sei).to.be.a('number');
                    expect(data.sei).to.be(0.0);
                  }
                }
                expect(data.output.averageOutput).to.be.a(Peidemo.SimulationOutputItem);
                      expect(data.output.averageOutput.dateStart).to.be.a('number');
                  expect(data.output.averageOutput.dateStart).to.be("0");
                  expect(data.output.averageOutput.dateEnd).to.be.a('number');
                  expect(data.output.averageOutput.dateEnd).to.be("0");
                  expect(data.output.averageOutput.description).to.be.a('string');
                  expect(data.output.averageOutput.description).to.be("");
                  {
                    let dataCtr = data.output.averageOutput.ekpis;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.EkpiSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.category).to.be.a('string');
                      expect(data.category).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      expect(data.min).to.be.a('number');
                      expect(data.min).to.be(0.0);
                      expect(data.max).to.be.a('number');
                      expect(data.max).to.be(0.0);
                      expect(data.parentSubindex).to.be.a('string');
                      expect(data.parentSubindex).to.be("");
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                      expect(data.valueNorm).to.be.a('number');
                      expect(data.valueNorm).to.be(0.0);
                      expect(data.unit).to.be.a('string');
                      expect(data.unit).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.output.averageOutput.subindices;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.SubindexSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      {
                        let dataCtr = data.children;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                    }
                  }
                  expect(data.output.averageOutput.sei).to.be.a('number');
                  expect(data.output.averageOutput.sei).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSimulation', function() {
        it('should call updateSimulation successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSimulation call and complete the assertions
          /*
          var body = new Peidemo.Simulation();
          body.id = "";
          body.name = "";
          body.description = "";
          body.status = "";
          body.input = new Peidemo.SimulationInput();
          body.input.items = [new Peidemo.SimulationInputItem()];
          body.input.items[0].dateStart = "0";
          body.input.items[0].dateEnd = "0";
          body.input.items[0].description = "";
          body.input.items[0].ships = [""];
          body.output = new Peidemo.SimulationOutput();
          body.output.items = [new Peidemo.SimulationOutputItem()];
          body.output.items[0].dateStart = "0";
          body.output.items[0].dateEnd = "0";
          body.output.items[0].description = "";
          body.output.items[0].ekpis = [new Peidemo.EkpiSimItem()];
          body.output.items[0].ekpis[0].name = "";
          body.output.items[0].ekpis[0].description = "";
          body.output.items[0].ekpis[0].category = "";
          body.output.items[0].ekpis[0].weight = 0.0;
          body.output.items[0].ekpis[0].min = 0.0;
          body.output.items[0].ekpis[0].max = 0.0;
          body.output.items[0].ekpis[0].parentSubindex = "";
          body.output.items[0].ekpis[0].value = 0.0;
          body.output.items[0].ekpis[0].valueNorm = 0.0;
          body.output.items[0].ekpis[0].unit = "";
          body.output.items[0].subindices = [new Peidemo.SubindexSimItem()];
          body.output.items[0].subindices[0].name = "";
          body.output.items[0].subindices[0].description = "";
          body.output.items[0].subindices[0].weight = 0.0;
          body.output.items[0].subindices[0].children = [""];
          body.output.items[0].subindices[0].value = 0.0;
          body.output.items[0].sei = 0.0;
          body.output.averageOutput = new Peidemo.SimulationOutputItem();
          body.output.averageOutput.dateStart = "0";
          body.output.averageOutput.dateEnd = "0";
          body.output.averageOutput.description = "";
          body.output.averageOutput.ekpis = [new Peidemo.EkpiSimItem()];
          body.output.averageOutput.ekpis[0].name = "";
          body.output.averageOutput.ekpis[0].description = "";
          body.output.averageOutput.ekpis[0].category = "";
          body.output.averageOutput.ekpis[0].weight = 0.0;
          body.output.averageOutput.ekpis[0].min = 0.0;
          body.output.averageOutput.ekpis[0].max = 0.0;
          body.output.averageOutput.ekpis[0].parentSubindex = "";
          body.output.averageOutput.ekpis[0].value = 0.0;
          body.output.averageOutput.ekpis[0].valueNorm = 0.0;
          body.output.averageOutput.ekpis[0].unit = "";
          body.output.averageOutput.subindices = [new Peidemo.SubindexSimItem()];
          body.output.averageOutput.subindices[0].name = "";
          body.output.averageOutput.subindices[0].description = "";
          body.output.averageOutput.subindices[0].weight = 0.0;
          body.output.averageOutput.subindices[0].children = [""];
          body.output.averageOutput.subindices[0].value = 0.0;
          body.output.averageOutput.sei = 0.0;

          instance.updateSimulation(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Simulation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.input).to.be.a(Peidemo.SimulationInput);
                  {
                let dataCtr = data.input.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Peidemo.SimulationInputItem);
                  expect(data.dateStart).to.be.a('number');
                  expect(data.dateStart).to.be("0");
                  expect(data.dateEnd).to.be.a('number');
                  expect(data.dateEnd).to.be("0");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  {
                    let dataCtr = data.ships;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                }
              }
            expect(data.output).to.be.a(Peidemo.SimulationOutput);
                  {
                let dataCtr = data.output.items;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Peidemo.SimulationOutputItem);
                  expect(data.dateStart).to.be.a('number');
                  expect(data.dateStart).to.be("0");
                  expect(data.dateEnd).to.be.a('number');
                  expect(data.dateEnd).to.be("0");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  {
                    let dataCtr = data.ekpis;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.EkpiSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.category).to.be.a('string');
                      expect(data.category).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      expect(data.min).to.be.a('number');
                      expect(data.min).to.be(0.0);
                      expect(data.max).to.be.a('number');
                      expect(data.max).to.be(0.0);
                      expect(data.parentSubindex).to.be.a('string');
                      expect(data.parentSubindex).to.be("");
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                      expect(data.valueNorm).to.be.a('number');
                      expect(data.valueNorm).to.be(0.0);
                      expect(data.unit).to.be.a('string');
                      expect(data.unit).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.subindices;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Peidemo.SubindexSimItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.weight).to.be.a('number');
                      expect(data.weight).to.be(0.0);
                      {
                        let dataCtr = data.children;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.value).to.be.a('number');
                      expect(data.value).to.be(0.0);
                    }
                  }
                  expect(data.sei).to.be.a('number');
                  expect(data.sei).to.be(0.0);
                }
              }
              expect(data.output.averageOutput).to.be.a(Peidemo.SimulationOutputItem);
                    expect(data.output.averageOutput.dateStart).to.be.a('number');
                expect(data.output.averageOutput.dateStart).to.be("0");
                expect(data.output.averageOutput.dateEnd).to.be.a('number');
                expect(data.output.averageOutput.dateEnd).to.be("0");
                expect(data.output.averageOutput.description).to.be.a('string');
                expect(data.output.averageOutput.description).to.be("");
                {
                  let dataCtr = data.output.averageOutput.ekpis;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.EkpiSimItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.category).to.be.a('string');
                    expect(data.category).to.be("");
                    expect(data.weight).to.be.a('number');
                    expect(data.weight).to.be(0.0);
                    expect(data.min).to.be.a('number');
                    expect(data.min).to.be(0.0);
                    expect(data.max).to.be.a('number');
                    expect(data.max).to.be(0.0);
                    expect(data.parentSubindex).to.be.a('string');
                    expect(data.parentSubindex).to.be("");
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be(0.0);
                    expect(data.valueNorm).to.be.a('number');
                    expect(data.valueNorm).to.be(0.0);
                    expect(data.unit).to.be.a('string');
                    expect(data.unit).to.be("");
                  }
                }
                {
                  let dataCtr = data.output.averageOutput.subindices;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Peidemo.SubindexSimItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.weight).to.be.a('number');
                    expect(data.weight).to.be(0.0);
                    {
                      let dataCtr = data.children;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be(0.0);
                  }
                }
                expect(data.output.averageOutput.sei).to.be.a('number');
                expect(data.output.averageOutput.sei).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
