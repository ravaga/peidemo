/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Peidemo.AirEmissionResourceApi();
  });

  describe('(package)', function() {
    describe('AirEmissionResourceApi', function() {
      describe('createAirEmission', function() {
        it('should call createAirEmission successfully', function(done) {
          // TODO: uncomment, update parameter values for createAirEmission call and complete the assertions
          /*
          var body = new Peidemo.AirEmission();
          body.id = "";
          body.category = "";
          body.description = "";
          body.berthBykWh = new Peidemo.AirEmissionUnit();
          body.berthBykWh.operation = "";
          body.berthBykWh.units = "";
          body.berthBykWh.co2 = 0.0;
          body.berthBykWh.nox = 0.0;
          body.berthBykWh.so2 = 0.0;
          body.berthBykWh.hc = 0.0;
          body.berthBykWh.pm = 0.0;
          body.manouvringBykWh = new Peidemo.AirEmissionUnit();
          body.manouvringBykWh.operation = "";
          body.manouvringBykWh.units = "";
          body.manouvringBykWh.co2 = 0.0;
          body.manouvringBykWh.nox = 0.0;
          body.manouvringBykWh.so2 = 0.0;
          body.manouvringBykWh.hc = 0.0;
          body.manouvringBykWh.pm = 0.0;

          instance.createAirEmission(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.AirEmission);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.berthBykWh).to.be.a(Peidemo.AirEmissionUnit);
                  expect(data.berthBykWh.operation).to.be.a('string');
              expect(data.berthBykWh.operation).to.be("");
              expect(data.berthBykWh.units).to.be.a('string');
              expect(data.berthBykWh.units).to.be("");
              expect(data.berthBykWh.co2).to.be.a('number');
              expect(data.berthBykWh.co2).to.be(0.0);
              expect(data.berthBykWh.nox).to.be.a('number');
              expect(data.berthBykWh.nox).to.be(0.0);
              expect(data.berthBykWh.so2).to.be.a('number');
              expect(data.berthBykWh.so2).to.be(0.0);
              expect(data.berthBykWh.hc).to.be.a('number');
              expect(data.berthBykWh.hc).to.be(0.0);
              expect(data.berthBykWh.pm).to.be.a('number');
              expect(data.berthBykWh.pm).to.be(0.0);
            expect(data.manouvringBykWh).to.be.a(Peidemo.AirEmissionUnit);
                  expect(data.manouvringBykWh.operation).to.be.a('string');
              expect(data.manouvringBykWh.operation).to.be("");
              expect(data.manouvringBykWh.units).to.be.a('string');
              expect(data.manouvringBykWh.units).to.be("");
              expect(data.manouvringBykWh.co2).to.be.a('number');
              expect(data.manouvringBykWh.co2).to.be(0.0);
              expect(data.manouvringBykWh.nox).to.be.a('number');
              expect(data.manouvringBykWh.nox).to.be(0.0);
              expect(data.manouvringBykWh.so2).to.be.a('number');
              expect(data.manouvringBykWh.so2).to.be(0.0);
              expect(data.manouvringBykWh.hc).to.be.a('number');
              expect(data.manouvringBykWh.hc).to.be(0.0);
              expect(data.manouvringBykWh.pm).to.be.a('number');
              expect(data.manouvringBykWh.pm).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAirEmission', function() {
        it('should call deleteAirEmission successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAirEmission call
          /*
          var id = "id_example";

          instance.deleteAirEmission(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAirEmissionByID', function() {
        it('should call getAirEmissionByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getAirEmissionByID call and complete the assertions
          /*
          var id = "id_example";

          instance.getAirEmissionByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.AirEmission);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.berthBykWh).to.be.a(Peidemo.AirEmissionUnit);
                  expect(data.berthBykWh.operation).to.be.a('string');
              expect(data.berthBykWh.operation).to.be("");
              expect(data.berthBykWh.units).to.be.a('string');
              expect(data.berthBykWh.units).to.be("");
              expect(data.berthBykWh.co2).to.be.a('number');
              expect(data.berthBykWh.co2).to.be(0.0);
              expect(data.berthBykWh.nox).to.be.a('number');
              expect(data.berthBykWh.nox).to.be(0.0);
              expect(data.berthBykWh.so2).to.be.a('number');
              expect(data.berthBykWh.so2).to.be(0.0);
              expect(data.berthBykWh.hc).to.be.a('number');
              expect(data.berthBykWh.hc).to.be(0.0);
              expect(data.berthBykWh.pm).to.be.a('number');
              expect(data.berthBykWh.pm).to.be(0.0);
            expect(data.manouvringBykWh).to.be.a(Peidemo.AirEmissionUnit);
                  expect(data.manouvringBykWh.operation).to.be.a('string');
              expect(data.manouvringBykWh.operation).to.be("");
              expect(data.manouvringBykWh.units).to.be.a('string');
              expect(data.manouvringBykWh.units).to.be("");
              expect(data.manouvringBykWh.co2).to.be.a('number');
              expect(data.manouvringBykWh.co2).to.be(0.0);
              expect(data.manouvringBykWh.nox).to.be.a('number');
              expect(data.manouvringBykWh.nox).to.be(0.0);
              expect(data.manouvringBykWh.so2).to.be.a('number');
              expect(data.manouvringBykWh.so2).to.be(0.0);
              expect(data.manouvringBykWh.hc).to.be.a('number');
              expect(data.manouvringBykWh.hc).to.be(0.0);
              expect(data.manouvringBykWh.pm).to.be.a('number');
              expect(data.manouvringBykWh.pm).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listAirEmissions', function() {
        it('should call listAirEmissions successfully', function(done) {
          // TODO: uncomment, update parameter values for listAirEmissions call and complete the assertions
          /*
          var opts = {};
          opts.category = "category_example";

          instance.listAirEmissions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Peidemo.AirEmission);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.category).to.be.a('string');
              expect(data.category).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.berthBykWh).to.be.a(Peidemo.AirEmissionUnit);
                    expect(data.berthBykWh.operation).to.be.a('string');
                expect(data.berthBykWh.operation).to.be("");
                expect(data.berthBykWh.units).to.be.a('string');
                expect(data.berthBykWh.units).to.be("");
                expect(data.berthBykWh.co2).to.be.a('number');
                expect(data.berthBykWh.co2).to.be(0.0);
                expect(data.berthBykWh.nox).to.be.a('number');
                expect(data.berthBykWh.nox).to.be(0.0);
                expect(data.berthBykWh.so2).to.be.a('number');
                expect(data.berthBykWh.so2).to.be(0.0);
                expect(data.berthBykWh.hc).to.be.a('number');
                expect(data.berthBykWh.hc).to.be(0.0);
                expect(data.berthBykWh.pm).to.be.a('number');
                expect(data.berthBykWh.pm).to.be(0.0);
              expect(data.manouvringBykWh).to.be.a(Peidemo.AirEmissionUnit);
                    expect(data.manouvringBykWh.operation).to.be.a('string');
                expect(data.manouvringBykWh.operation).to.be("");
                expect(data.manouvringBykWh.units).to.be.a('string');
                expect(data.manouvringBykWh.units).to.be("");
                expect(data.manouvringBykWh.co2).to.be.a('number');
                expect(data.manouvringBykWh.co2).to.be(0.0);
                expect(data.manouvringBykWh.nox).to.be.a('number');
                expect(data.manouvringBykWh.nox).to.be(0.0);
                expect(data.manouvringBykWh.so2).to.be.a('number');
                expect(data.manouvringBykWh.so2).to.be(0.0);
                expect(data.manouvringBykWh.hc).to.be.a('number');
                expect(data.manouvringBykWh.hc).to.be(0.0);
                expect(data.manouvringBykWh.pm).to.be.a('number');
                expect(data.manouvringBykWh.pm).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAirEmission', function() {
        it('should call updateAirEmission successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAirEmission call and complete the assertions
          /*
          var body = new Peidemo.AirEmission();
          body.id = "";
          body.category = "";
          body.description = "";
          body.berthBykWh = new Peidemo.AirEmissionUnit();
          body.berthBykWh.operation = "";
          body.berthBykWh.units = "";
          body.berthBykWh.co2 = 0.0;
          body.berthBykWh.nox = 0.0;
          body.berthBykWh.so2 = 0.0;
          body.berthBykWh.hc = 0.0;
          body.berthBykWh.pm = 0.0;
          body.manouvringBykWh = new Peidemo.AirEmissionUnit();
          body.manouvringBykWh.operation = "";
          body.manouvringBykWh.units = "";
          body.manouvringBykWh.co2 = 0.0;
          body.manouvringBykWh.nox = 0.0;
          body.manouvringBykWh.so2 = 0.0;
          body.manouvringBykWh.hc = 0.0;
          body.manouvringBykWh.pm = 0.0;

          instance.updateAirEmission(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.AirEmission);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.berthBykWh).to.be.a(Peidemo.AirEmissionUnit);
                  expect(data.berthBykWh.operation).to.be.a('string');
              expect(data.berthBykWh.operation).to.be("");
              expect(data.berthBykWh.units).to.be.a('string');
              expect(data.berthBykWh.units).to.be("");
              expect(data.berthBykWh.co2).to.be.a('number');
              expect(data.berthBykWh.co2).to.be(0.0);
              expect(data.berthBykWh.nox).to.be.a('number');
              expect(data.berthBykWh.nox).to.be(0.0);
              expect(data.berthBykWh.so2).to.be.a('number');
              expect(data.berthBykWh.so2).to.be(0.0);
              expect(data.berthBykWh.hc).to.be.a('number');
              expect(data.berthBykWh.hc).to.be(0.0);
              expect(data.berthBykWh.pm).to.be.a('number');
              expect(data.berthBykWh.pm).to.be(0.0);
            expect(data.manouvringBykWh).to.be.a(Peidemo.AirEmissionUnit);
                  expect(data.manouvringBykWh.operation).to.be.a('string');
              expect(data.manouvringBykWh.operation).to.be("");
              expect(data.manouvringBykWh.units).to.be.a('string');
              expect(data.manouvringBykWh.units).to.be("");
              expect(data.manouvringBykWh.co2).to.be.a('number');
              expect(data.manouvringBykWh.co2).to.be(0.0);
              expect(data.manouvringBykWh.nox).to.be.a('number');
              expect(data.manouvringBykWh.nox).to.be(0.0);
              expect(data.manouvringBykWh.so2).to.be.a('number');
              expect(data.manouvringBykWh.so2).to.be(0.0);
              expect(data.manouvringBykWh.hc).to.be.a('number');
              expect(data.manouvringBykWh.hc).to.be(0.0);
              expect(data.manouvringBykWh.pm).to.be.a('number');
              expect(data.manouvringBykWh.pm).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
