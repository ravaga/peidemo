/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Peidemo.LoadMCRResourceApi();
  });

  describe('(package)', function() {
    describe('LoadMCRResourceApi', function() {
      describe('createLoadMCR', function() {
        it('should call createLoadMCR successfully', function(done) {
          // TODO: uncomment, update parameter values for createLoadMCR call and complete the assertions
          /*
          var body = new Peidemo.LoadMCR();
          body.id = "";
          body.category = "";
          body.port = 0.0;
          body.manouvring = 0.0;

          instance.createLoadMCR(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.LoadMCR);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.port).to.be.a('number');
            expect(data.port).to.be(0.0);
            expect(data.manouvring).to.be.a('number');
            expect(data.manouvring).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteLoadMCR', function() {
        it('should call deleteLoadMCR successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteLoadMCR call
          /*
          var id = "id_example";

          instance.deleteLoadMCR(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLoadMCRByID', function() {
        it('should call getLoadMCRByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getLoadMCRByID call and complete the assertions
          /*
          var id = "id_example";

          instance.getLoadMCRByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.LoadMCR);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.port).to.be.a('number');
            expect(data.port).to.be(0.0);
            expect(data.manouvring).to.be.a('number');
            expect(data.manouvring).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listLoadMCRs', function() {
        it('should call listLoadMCRs successfully', function(done) {
          // TODO: uncomment, update parameter values for listLoadMCRs call and complete the assertions
          /*
          var opts = {};
          opts.category = "category_example";

          instance.listLoadMCRs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Peidemo.LoadMCR);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.category).to.be.a('string');
              expect(data.category).to.be("");
              expect(data.port).to.be.a('number');
              expect(data.port).to.be(0.0);
              expect(data.manouvring).to.be.a('number');
              expect(data.manouvring).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLoadMCR', function() {
        it('should call updateLoadMCR successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLoadMCR call and complete the assertions
          /*
          var body = new Peidemo.LoadMCR();
          body.id = "";
          body.category = "";
          body.port = 0.0;
          body.manouvring = 0.0;

          instance.updateLoadMCR(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.LoadMCR);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.port).to.be.a('number');
            expect(data.port).to.be(0.0);
            expect(data.manouvring).to.be.a('number');
            expect(data.manouvring).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
