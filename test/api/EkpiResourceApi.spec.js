/*
 * PEIDEMO
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Peidemo);
  }
}(this, function(expect, Peidemo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Peidemo.EkpiResourceApi();
  });

  describe('(package)', function() {
    describe('EkpiResourceApi', function() {
      describe('createEkpi', function() {
        it('should call createEkpi successfully', function(done) {
          // TODO: uncomment, update parameter values for createEkpi call and complete the assertions
          /*
          var body = new Peidemo.Ekpi();
          body.id = "";
          body.name = "";
          body.description = "";
          body.category = "";
          body.weight = 0.0;
          body.min = 0.0;
          body.max = 0.0;
          body.parentSubindex = "";
          body.unit = "";

          instance.createEkpi(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Ekpi);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.weight).to.be.a('number');
            expect(data.weight).to.be(0.0);
            expect(data.min).to.be.a('number');
            expect(data.min).to.be(0.0);
            expect(data.max).to.be.a('number');
            expect(data.max).to.be(0.0);
            expect(data.parentSubindex).to.be.a('string');
            expect(data.parentSubindex).to.be("");
            expect(data.unit).to.be.a('string');
            expect(data.unit).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteEkpi', function() {
        it('should call deleteEkpi successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEkpi call
          /*
          var id = "id_example";

          instance.deleteEkpi(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEkpiByID', function() {
        it('should call getEkpiByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getEkpiByID call and complete the assertions
          /*
          var id = "id_example";

          instance.getEkpiByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Ekpi);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.weight).to.be.a('number');
            expect(data.weight).to.be(0.0);
            expect(data.min).to.be.a('number');
            expect(data.min).to.be(0.0);
            expect(data.max).to.be.a('number');
            expect(data.max).to.be(0.0);
            expect(data.parentSubindex).to.be.a('string');
            expect(data.parentSubindex).to.be("");
            expect(data.unit).to.be.a('string');
            expect(data.unit).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listEkpis', function() {
        it('should call listEkpis successfully', function(done) {
          // TODO: uncomment, update parameter values for listEkpis call and complete the assertions
          /*
          var opts = {};
          opts.category = "category_example";

          instance.listEkpis(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Peidemo.Ekpi);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.category).to.be.a('string');
              expect(data.category).to.be("");
              expect(data.weight).to.be.a('number');
              expect(data.weight).to.be(0.0);
              expect(data.min).to.be.a('number');
              expect(data.min).to.be(0.0);
              expect(data.max).to.be.a('number');
              expect(data.max).to.be(0.0);
              expect(data.parentSubindex).to.be.a('string');
              expect(data.parentSubindex).to.be("");
              expect(data.unit).to.be.a('string');
              expect(data.unit).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateEkpi', function() {
        it('should call updateEkpi successfully', function(done) {
          // TODO: uncomment, update parameter values for updateEkpi call and complete the assertions
          /*
          var body = new Peidemo.Ekpi();
          body.id = "";
          body.name = "";
          body.description = "";
          body.category = "";
          body.weight = 0.0;
          body.min = 0.0;
          body.max = 0.0;
          body.parentSubindex = "";
          body.unit = "";

          instance.updateEkpi(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Peidemo.Ekpi);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.weight).to.be.a('number');
            expect(data.weight).to.be(0.0);
            expect(data.min).to.be.a('number');
            expect(data.min).to.be(0.0);
            expect(data.max).to.be.a('number');
            expect(data.max).to.be(0.0);
            expect(data.parentSubindex).to.be.a('string');
            expect(data.parentSubindex).to.be("");
            expect(data.unit).to.be.a('string');
            expect(data.unit).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
